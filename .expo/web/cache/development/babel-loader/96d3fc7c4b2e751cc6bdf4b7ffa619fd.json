{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\win10\\\\Downloads\\\\flappy-birds-react-native-main\\\\flappy-birds-react-native-main\\\\App.js\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Bird from \"./components/Bird\";\nimport Obstacles from \"./components/Obstacles\";\nexport default function App() {\n  var screenWidth = Dimensions.get(\"screen\").width;\n  var screenHeight = Dimensions.get(\"screen\").height;\n  var birdLeft = screenWidth / 2;\n\n  var _useState = useState(screenHeight / 2),\n      _useState2 = _slicedToArray(_useState, 2),\n      birdBottom = _useState2[0],\n      setBirdBottom = _useState2[1];\n\n  var _useState3 = useState(screenWidth),\n      _useState4 = _slicedToArray(_useState3, 2),\n      obstaclesLeft = _useState4[0],\n      setObstaclesLeft = _useState4[1];\n\n  var _useState5 = useState(screenWidth + screenWidth / 2 + 30),\n      _useState6 = _slicedToArray(_useState5, 2),\n      obstaclesLeftTwo = _useState6[0],\n      setObstaclesLeftTwo = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      obstaclesNegHeight = _useState8[0],\n      setObstaclesNegHeight = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      obstaclesNegHeightTwo = _useState10[0],\n      setObstaclesNegHeightTwo = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isGameOver = _useState12[0],\n      setIsGameOver = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      score = _useState14[0],\n      setScore = _useState14[1];\n\n  var gravity = 3;\n  var obstacleWidth = 60;\n  var obstacleHeight = 300;\n  var gap = 200;\n  var gameTimerId;\n  var obstaclesTimerId;\n  var obstaclesTimerIdTwo;\n  useEffect(function () {\n    if (birdBottom > 0) {\n      gameTimerId = setInterval(function () {\n        setBirdBottom(function (birdBottom) {\n          return birdBottom - gravity;\n        });\n      }, 30);\n      return function () {\n        clearInterval(gameTimerId);\n      };\n    }\n  }, [birdBottom]);\n  console.log(birdBottom);\n\n  var jump = function jump() {\n    if (!isGameOver && birdBottom < screenHeight) {\n      setBirdBottom(function (birdBottom) {\n        return birdBottom + 50;\n      });\n      console.log('jumped');\n    }\n  };\n\n  useEffect(function () {\n    if (obstaclesLeft > -60) {\n      obstaclesTimerId = setInterval(function () {\n        setObstaclesLeft(function (obstaclesLeft) {\n          return obstaclesLeft - 5;\n        });\n      }, 30);\n      return function () {\n        clearInterval(obstaclesTimerId);\n      };\n    } else {\n      setScore(function (score) {\n        return score + 1;\n      });\n      setObstaclesLeft(screenWidth);\n      setObstaclesNegHeight(-Math.random() * 100);\n    }\n  }, [obstaclesLeft]);\n  useEffect(function () {\n    if (obstaclesLeftTwo > -60) {\n      obstaclesTimerIdTwo = setInterval(function () {\n        setObstaclesLeftTwo(function (obstaclesLeftTwo) {\n          return obstaclesLeftTwo - 5;\n        });\n      }, 30);\n      return function () {\n        clearInterval(obstaclesTimerIdTwo);\n      };\n    } else {\n      setScore(function (score) {\n        return score + 1;\n      });\n      setObstaclesLeftTwo(screenWidth);\n      setObstaclesNegHeightTwo(-Math.random() * 100);\n    }\n  }, [obstaclesLeftTwo]);\n  useEffect(function () {\n    console.log(obstaclesLeft);\n    console.log(screenWidth / 2);\n    console.log(obstaclesLeft > screenWidth / 2);\n\n    if ((birdBottom < obstaclesNegHeight + obstacleHeight + 30 || birdBottom > obstaclesNegHeight + obstacleHeight + gap - 30) && obstaclesLeft > screenWidth / 2 - 30 && obstaclesLeft < screenWidth / 2 + 30 || (birdBottom < obstaclesNegHeightTwo + obstacleHeight + 30 || birdBottom > obstaclesNegHeightTwo + obstacleHeight + gap - 30) && obstaclesLeftTwo > screenWidth / 2 - 30 && obstaclesLeftTwo < screenWidth / 2 + 30) {\n      console.log('game over');\n      gameOver();\n    }\n  });\n\n  var gameOver = function gameOver() {\n    clearInterval(gameTimerId);\n    clearInterval(obstaclesTimerId);\n    clearInterval(obstaclesTimerIdTwo);\n    setIsGameOver(true);\n  };\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: jump,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, isGameOver && React.createElement(Text, {\n    style: {\n      fontSize: '30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 24\n    }\n  }, score), React.createElement(Bird, {\n    birdBottom: birdBottom,\n    birdLeft: birdLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), React.createElement(Obstacles, {\n    color: 'green',\n    obstacleWidth: obstacleWidth,\n    obstacleHeight: obstacleHeight,\n    randomBottom: obstaclesNegHeight,\n    gap: gap,\n    obstaclesLeft: obstaclesLeft,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), React.createElement(Obstacles, {\n    color: 'yellow',\n    obstacleWidth: obstacleWidth,\n    obstacleHeight: obstacleHeight,\n    randomBottom: obstaclesNegHeightTwo,\n    gap: gap,\n    obstaclesLeft: obstaclesLeftTwo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'red'\n  }\n});","map":{"version":3,"sources":["C:/Users/win10/Downloads/flappy-birds-react-native-main/flappy-birds-react-native-main/App.js"],"names":["React","useEffect","useState","Bird","Obstacles","App","screenWidth","Dimensions","get","width","screenHeight","height","birdLeft","birdBottom","setBirdBottom","obstaclesLeft","setObstaclesLeft","obstaclesLeftTwo","setObstaclesLeftTwo","obstaclesNegHeight","setObstaclesNegHeight","obstaclesNegHeightTwo","setObstaclesNegHeightTwo","isGameOver","setIsGameOver","score","setScore","gravity","obstacleWidth","obstacleHeight","gap","gameTimerId","obstaclesTimerId","obstaclesTimerIdTwo","setInterval","clearInterval","console","log","jump","Math","random","gameOver","styles","container","fontSize","StyleSheet","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, Dimensions, TouchableWithoutFeedback } from 'react-native';\nimport Bird from './components/Bird'\nimport Obstacles from './components/Obstacles'\n\nexport default function App() {\n  const screenWidth = Dimensions.get(\"screen\").width\n  const screenHeight = Dimensions.get(\"screen\").height\n  const birdLeft = screenWidth / 2\n  const [birdBottom, setBirdBottom]= useState(screenHeight / 2)\n  const [obstaclesLeft, setObstaclesLeft]= useState(screenWidth)\n  const [obstaclesLeftTwo, setObstaclesLeftTwo]= useState(screenWidth + screenWidth/2 + 30)\n  const [obstaclesNegHeight, setObstaclesNegHeight]= useState(0)\n  const [obstaclesNegHeightTwo, setObstaclesNegHeightTwo]= useState(0)\n  const [isGameOver, setIsGameOver]= useState(false)\n  const [score, setScore]= useState(0)\n  const gravity = 3\n  let obstacleWidth = 60\n  let obstacleHeight = 300\n  let gap = 200\n  let gameTimerId\n  let obstaclesTimerId\n  let obstaclesTimerIdTwo\n  \n//start bird falling\n  useEffect(() => {\n    if (birdBottom > 0) {\n      gameTimerId = setInterval(() => {\n        setBirdBottom(birdBottom => birdBottom - gravity)\n      },30)\n  \n      return () => {\n        clearInterval(gameTimerId)\n      }\n    }\n    //if i dont have birdBottom as a dependecy, it wont stop\n  }, [birdBottom])\n  console.log(birdBottom)\n\n  const jump = () => {\n    if (!isGameOver && (birdBottom < screenHeight)) {\n      setBirdBottom(birdBottom => birdBottom + 50)\n      console.log('jumped')\n    }\n  }\n\n  //start first obstacle\n  useEffect(() => {\n    if (obstaclesLeft > -60) {\n      obstaclesTimerId = setInterval(() => {\n        setObstaclesLeft(obstaclesLeft => obstaclesLeft - 5)\n      }, 30)\n      return () => {\n        clearInterval(obstaclesTimerId)\n      }\n    } else {\n      setScore(score => score +1)\n      setObstaclesLeft(screenWidth)\n      setObstaclesNegHeight( - Math.random() * 100)\n    }\n  }, [obstaclesLeft])\n\n  //start second obstacle\n  useEffect(() => {\n    if (obstaclesLeftTwo > -60) {\n      obstaclesTimerIdTwo = setInterval(() => {\n        setObstaclesLeftTwo(obstaclesLeftTwo => obstaclesLeftTwo - 5)\n      }, 30)\n        return () => {\n          clearInterval(obstaclesTimerIdTwo)\n        }\n      } else {\n          setScore(score => score +1)\n          setObstaclesLeftTwo(screenWidth)\n          setObstaclesNegHeightTwo( - Math.random() * 100)\n        }\n  }, [obstaclesLeftTwo])\n\n    //check for collisions\n    useEffect(() => {\n      console.log(obstaclesLeft)\n      console.log(screenWidth/2)\n      console.log(obstaclesLeft > screenWidth/2)\n      if (\n        ((birdBottom < (obstaclesNegHeight + obstacleHeight + 30) ||\n        birdBottom > (obstaclesNegHeight + obstacleHeight + gap -30)) &&\n        (obstaclesLeft > screenWidth/2 -30 && obstaclesLeft < screenWidth/2 + 30 )\n        )\n        || \n        ((birdBottom < (obstaclesNegHeightTwo + obstacleHeight + 30) ||\n        birdBottom > (obstaclesNegHeightTwo + obstacleHeight + gap -30)) &&\n        (obstaclesLeftTwo > screenWidth/2 -30 && obstaclesLeftTwo < screenWidth/2 + 30 )\n        )\n        ) \n        {\n        console.log('game over')\n        gameOver()\n      }\n    })\n\n    const gameOver = () => {\n      clearInterval(gameTimerId)\n      clearInterval(obstaclesTimerId)\n      clearInterval(obstaclesTimerIdTwo)\n      setIsGameOver(true)\n    }\n  \n\n  return (\n    <TouchableWithoutFeedback onPress={jump}>\n      <View style={styles.container}>\n        {isGameOver && <Text style={{fontSize: '30px'}}>{score}</Text>}\n        <Bird \n          birdBottom = {birdBottom} \n          birdLeft = {birdLeft}\n        />\n        <Obstacles \n          color={'green'}\n          obstacleWidth = {obstacleWidth}\n          obstacleHeight = {obstacleHeight}\n          randomBottom = {obstaclesNegHeight}\n          gap = {gap}\n          obstaclesLeft = {obstaclesLeft}\n        />\n        <Obstacles \n          color={'yellow'}\n          obstacleWidth = {obstacleWidth}\n          obstacleHeight = {obstacleHeight}\n          randomBottom = {obstaclesNegHeightTwo}\n          gap = {gap}\n          obstaclesLeft = {obstaclesLeftTwo}\n        />\n      </View>\n    </TouchableWithoutFeedback>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'red',\n  },\n})\n"]},"metadata":{},"sourceType":"module"}